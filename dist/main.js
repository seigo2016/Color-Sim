/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/draw.ts":
/*!*********************!*\
  !*** ./src/draw.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Itokake = void 0;\nvar static_1 = __webpack_require__(/*! ./static */ \"./src/static.ts\");\nvar init_1 = __webpack_require__(/*! ./init */ \"./src/init.ts\");\nvar Itokake = /** @class */ (function () {\n    function Itokake() {\n    }\n    Itokake.prototype.init = function (canvas) {\n        if (!canvas.getContext) {\n            console.log('error');\n            return;\n        }\n        this.canvas = canvas;\n        this.ctx = canvas.getContext('2d');\n    };\n    Itokake.prototype.drawPin = function (shape, pinCount) {\n        this.pin = init_1.InitPin(shape, pinCount);\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        this.ctx.beginPath();\n        this.ctx.fillStyle = 'white';\n        for (var _i = 0, _a = this.pin; _i < _a.length; _i++) {\n            var i = _a[_i];\n            this.ctx.rect(i[0], i[1], 2, 2);\n            this.ctx.fill();\n        }\n        this.ctx.closePath();\n    };\n    Itokake.prototype.drawLine = function (shape, interval, colorSet, bgColor) {\n        this.ctx.fillStyle = bgColor;\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n        if (shape == static_1.StaticValue.Shape.Bud) {\n            for (var i = 0; i < 6; i++) {\n                for (var j = 0; j < 3; j++) {\n                    for (var k = 0; k < 27; k++) {\n                        this.ctx.strokeStyle = colorSet[j];\n                        var d = interval[j];\n                        this.ctx.beginPath();\n                        this.ctx.moveTo(this.pin[81 * i + 27 * j + k][0], this.pin[81 * i + 27 * j + k][1]);\n                        var nextPin = (27 * j + k + d) % 81;\n                        this.ctx.lineTo(this.pin[81 * i + nextPin][0], this.pin[81 * i + nextPin][1]);\n                        this.ctx.stroke();\n                        this.ctx.closePath();\n                    }\n                }\n            }\n        }\n        else if (shape == static_1.StaticValue.Shape.Hexagram) {\n            for (var i = 0; i < 12; i++) {\n                for (var j = 0; j < 3; j++) {\n                    for (var k = 0; k < 16; k++) {\n                        this.ctx.strokeStyle = colorSet[j];\n                        var d = interval[j];\n                        this.ctx.beginPath();\n                        this.ctx.moveTo(this.pin[48 * i + j * 16 + k][0], this.pin[48 * i + j * 16 + k][1]);\n                        var nextPin = (j * 16 + k + d) % 48;\n                        this.ctx.lineTo(this.pin[48 * i + nextPin][0], this.pin[48 * i + nextPin][1]);\n                        this.ctx.stroke();\n                        this.ctx.closePath();\n                    }\n                }\n            }\n        }\n        else if (shape == static_1.StaticValue.Shape.HempLeaf) {\n            var drawOrder = [1, 3, 0, 2];\n            for (var i = 0; i < 6; i++) {\n                for (var _i = 0, drawOrder_1 = drawOrder; _i < drawOrder_1.length; _i++) {\n                    var j = drawOrder_1[_i];\n                    for (var k = 0; k < 16; k++) {\n                        this.ctx.strokeStyle = colorSet[j % 2];\n                        var d = interval[j];\n                        this.ctx.beginPath();\n                        this.ctx.moveTo(this.pin[64 * i + j * 16 + k][0], this.pin[64 * i + j * 16 + k][1]);\n                        var nextPin = (j * 16 + k + d) % 64;\n                        this.ctx.lineTo(this.pin[64 * i + nextPin][0], this.pin[64 * i + nextPin][1]);\n                        this.ctx.stroke();\n                        this.ctx.closePath();\n                    }\n                }\n            }\n        }\n        else if (shape == static_1.StaticValue.Shape.Custom) {\n            for (var i = 0; i < interval.length; i++) {\n                this.ctx.strokeStyle = colorSet.reverse()[i];\n                var n = 0;\n                for (var j = 0; j < this.pin.length; j++) {\n                    var d = interval[i];\n                    this.ctx.beginPath();\n                    this.ctx.moveTo(this.pin[n][0], this.pin[n][1]);\n                    this.ctx.lineTo(this.pin[(n + d) % this.pin.length][0], this.pin[(n + d) % this.pin.length][1]);\n                    this.ctx.stroke();\n                    this.ctx.closePath();\n                    n = (n + d) % this.pin.length;\n                }\n            }\n        }\n        else {\n            for (var i in interval) {\n                this.ctx.strokeStyle = colorSet[i];\n                var n = 0;\n                for (var j = 0; j < this.pin.length; j++) {\n                    var d = interval[i];\n                    this.ctx.beginPath();\n                    this.ctx.moveTo(this.pin[n][0], this.pin[n][1]);\n                    this.ctx.lineTo(this.pin[(n + d) % this.pin.length][0], this.pin[(n + d) % this.pin.length][1]);\n                    this.ctx.stroke();\n                    this.ctx.closePath();\n                    n = (n + d) % this.pin.length;\n                }\n            }\n        }\n    };\n    return Itokake;\n}());\nexports.Itokake = Itokake;\n\n\n//# sourceURL=webpack://Color-Sim/./src/draw.ts?");

/***/ }),

/***/ "./src/init.ts":
/*!*********************!*\
  !*** ./src/init.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.InitPin = void 0;\nvar static_1 = __webpack_require__(/*! ./static */ \"./src/static.ts\");\nfunction deg2rad(degree) {\n    var radian = degree * (Math.PI / 180);\n    return radian;\n}\nfunction InitPin(shape, pinCount) {\n    var Shape = static_1.StaticValue.Shape;\n    var defaultPin = [];\n    if (shape <= Shape.Circle || shape == Shape.Custom) {\n        var pin = [];\n        for (var i = 0; i < pinCount; i++) {\n            var degree = 360 / pinCount;\n            var x = 250 + 250 * Math.cos(deg2rad(degree) * i);\n            var y = 250 + 250 * Math.sin(deg2rad(degree) * i);\n            pin.push([x, y]);\n        }\n        return pin;\n    }\n    else if (shape == Shape.Square) {\n        var pin = [];\n        for (var i = 0; i < 16; i++) {\n            pin.push([10 + 30 * i, 10]);\n        }\n        for (var i = 0; i < 16; i++) {\n            pin.push([490, 10 + 30 * i]);\n        }\n        for (var i = 0; i < 16; i++) {\n            pin.push([490 - 30 * i, 490]);\n        }\n        for (var i = 0; i < 16; i++) {\n            pin.push([10, 490 - 30 * i]);\n        }\n        return pin;\n    }\n    else if (shape == Shape.Pentagon) {\n        var pin = new Array(80);\n        for (var i = 0; i < 5; i++) {\n            var degree = 72 * i - 18;\n            pin[i * 16] = [250 + 250 * Math.cos(deg2rad(degree)), 270 + 250 * Math.sin(deg2rad(degree))];\n        }\n        for (var i = 0; i < 80; i++) {\n            if (!pin[i]) {\n                if (i < 64) {\n                    var x = ((16 - (i % 16)) * pin[Math.floor(i / 16) * 16][0] +\n                        (i % 16) * pin[(Math.floor(i / 16) + 1) * 16][0]) /\n                        16;\n                    var y = ((16 - (i % 16)) * pin[Math.floor(i / 16) * 16][1] +\n                        (i % 16) * pin[(Math.floor(i / 16) + 1) * 16][1]) /\n                        16;\n                    pin[i] = [x, y];\n                }\n                else {\n                    var x = ((16 - (i % 16)) * pin[Math.floor(i / 16) * 16][0] + (i % 16) * pin[0][0]) / 16;\n                    var y = ((16 - (i % 16)) * pin[Math.floor(i / 16) * 16][1] + (i % 16) * pin[0][1]) / 16;\n                    pin[i] = [x, y];\n                }\n            }\n        }\n        return pin;\n    }\n    else if (shape == Shape.Hexagon) {\n        var pin = new Array(72);\n        for (var i = 0; i < 6; i++) {\n            var degree = 60 * i;\n            pin[i * 12] = [250 + 250 * Math.cos(deg2rad(degree)), 270 + 250 * Math.sin(deg2rad(degree))];\n        }\n        for (var i = 0; i < 72; i++) {\n            if (!pin[i]) {\n                if (i < 60) {\n                    var x = ((12 - (i % 12)) * pin[Math.floor(i / 12) * 12][0] +\n                        (i % 12) * pin[(Math.floor(i / 12) + 1) * 12][0]) /\n                        12;\n                    var y = ((12 - (i % 12)) * pin[Math.floor(i / 12) * 12][1] +\n                        (i % 12) * pin[(Math.floor(i / 12) + 1) * 12][1]) /\n                        12;\n                    pin[i] = [x, y];\n                }\n                else {\n                    var x = ((12 - (i % 12)) * pin[Math.floor(i / 12) * 12][0] + (i % 12) * pin[0][0]) / 12;\n                    var y = ((12 - (i % 12)) * pin[Math.floor(i / 12) * 12][1] + (i % 12) * pin[0][1]) / 12;\n                    pin[i] = [x, y];\n                }\n            }\n        }\n        return pin;\n    }\n    else if (shape == Shape.Bud) {\n        var pin = new Array(81 * 6);\n        for (var i = 0; i < 6 * 81; i++) {\n            pin[i] = [0, 0];\n        }\n        for (var i = 0; i < 6; i++) {\n            pin[i * 81] = [250 + 250 * Math.cos(deg2rad(60 * i)), 250 + 250 * Math.sin(deg2rad(60 * i))];\n            pin[i * 81 + 27] = [250 + 250 * Math.cos(deg2rad(60 * i + 60)), 250 + 250 * Math.sin(deg2rad(60 * i + 60))];\n            pin[i * 81 + 54] = [250, 250];\n            for (var j = 0; j < 81; j++) {\n                if (j == 27 || j == 54 || j == 0) {\n                    continue;\n                }\n                var x = 0, y = 0;\n                if (j < 27) {\n                    x = ((27 - j) * pin[i * 81][0] + j * pin[i * 81 + 27][0]) / 27;\n                    y = ((27 - j) * pin[i * 81][1] + j * pin[i * 81 + 27][1]) / 27;\n                }\n                else if (j < 54) {\n                    x = ((54 - j) * pin[i * 81 + 27][0] + (j - 27) * pin[i * 81 + 54][0]) / 27;\n                    y = ((54 - j) * pin[i * 81 + 27][1] + (j - 27) * pin[i * 81 + 54][1]) / 27;\n                }\n                else if (j < 81) {\n                    x = ((81 - j) * pin[i * 81 + 54][0] + (j - 54) * pin[i * 81][0]) / 27;\n                    y = ((81 - j) * pin[i * 81 + 54][1] + (j - 54) * pin[i * 81][1]) / 27;\n                }\n                pin[i * 81 + j] = [x, y];\n            }\n        }\n        return pin;\n    }\n    else if (shape == Shape.Hexagram) {\n        var pin = new Array(16 * 3 * 12);\n        var vertex = [\n            [\n                [250, 0],\n                [180, 125],\n                [320, 125],\n            ],\n            [\n                [40, 125],\n                [180, 125],\n                [110, 250],\n            ],\n            [\n                [180, 125],\n                [250, 250],\n                [110, 250],\n            ],\n            [\n                [320, 125],\n                [250, 250],\n                [180, 125],\n            ],\n            [\n                [320, 125],\n                [250, 250],\n                [390, 250],\n            ],\n            [\n                [460, 125],\n                [320, 125],\n                [390, 250],\n            ],\n            [\n                [40, 375],\n                [110, 250],\n                [180, 375],\n            ],\n            [\n                [110, 250],\n                [250, 250],\n                [180, 375],\n            ],\n            [\n                [180, 375],\n                [250, 250],\n                [320, 375],\n            ],\n            [\n                [390, 250],\n                [250, 250],\n                [320, 375],\n            ],\n            [\n                [460, 375],\n                [390, 250],\n                [320, 375],\n            ],\n            [\n                [250, 500],\n                [320, 375],\n                [180, 375],\n            ],\n        ];\n        for (var i = 0; i < 12; i++) {\n            for (var j = 0; j < 3; j++) {\n                for (var k = 0; k < 16; k++) {\n                    var x = 0, y = 0;\n                    x = (k * vertex[i][j][0] + (16 - k) * vertex[i][(j + 1) % 3][0]) / 16;\n                    y = (k * vertex[i][j][1] + (16 - k) * vertex[i][(j + 1) % 3][1]) / 16;\n                    pin[48 * i + j * 16 + k] = [x, y];\n                }\n            }\n        }\n        return pin;\n    }\n    else if (shape == Shape.HempLeaf) {\n        var pin = new Array(16 * 4 * 6);\n        var vertex = new Array(6);\n        for (var i = 0; i < 6; i++) {\n            vertex[i] = new Array(4);\n            vertex[i][0] = [250 + 250 * Math.cos(deg2rad(60 * i + 30)), 250 + 250 * Math.sin(deg2rad(60 * i + 30))];\n            vertex[i][1] = [250 + 144 * Math.cos(deg2rad(60 * i)), 250 + 144 * Math.sin(deg2rad(60 * i))];\n            vertex[i][2] = [250, 250];\n            vertex[i][3] = [250 + 144 * Math.cos(deg2rad(60 * i + 60)), 250 + 144 * Math.sin(deg2rad(60 * i + 60))];\n        }\n        for (var i = 0; i < 6; i++) {\n            for (var j = 0; j < 4; j++) {\n                for (var k = 0; k < 16; k++) {\n                    var x = 0, y = 0;\n                    x = (k * vertex[i][j][0] + (16 - k) * vertex[i][(j + 1) % 4][0]) / 16;\n                    y = (k * vertex[i][j][1] + (16 - k) * vertex[i][(j + 1) % 4][1]) / 16;\n                    pin[64 * i + j * 16 + k] = [x, y];\n                }\n            }\n        }\n        return pin;\n    }\n    return defaultPin;\n}\nexports.InitPin = InitPin;\n\n\n//# sourceURL=webpack://Color-Sim/./src/init.ts?");

/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar draw_1 = __webpack_require__(/*! ./draw */ \"./src/draw.ts\");\nvar static_1 = __webpack_require__(/*! ./static */ \"./src/static.ts\");\nvar shapeElement = document.getElementById('shape');\nvar pinCountElement = document.getElementById('pinCount');\nvar intervalElements = document.querySelectorAll('.interval');\nvar colorElements = document.querySelectorAll('.color');\nvar bgColorElement = document.getElementById('bg-color');\nvar pinCount = 48;\nvar draw;\nvar shapeNumber = 0;\nvar bgColor = '#000000';\nvar interval;\nvar canvas;\nvar colorSet = Array(12).fill('#ffffff');\ndocument.addEventListener('DOMContentLoaded', function () {\n    canvas = document.getElementById('canvas');\n    canvas.width = 500;\n    draw = new draw_1.Itokake();\n    draw.init(canvas);\n    interval = static_1.StaticValue.defaultInterval[0];\n    drawAll();\n});\nfunction drawAll() {\n    draw.drawPin(shapeNumber, pinCount);\n    draw.drawLine(shapeNumber, interval, colorSet, bgColor);\n    setColSize(shapeNumber);\n}\nconsole.log(pinCountElement.value);\n// 形状変更\nshapeElement.addEventListener('change', function () {\n    shapeNumber = Number(shapeElement.value);\n    pinCount = static_1.StaticValue.defaultPin[shapeNumber];\n    if (shapeNumber == 11) {\n        document.getElementById('custompin').style.display = 'block';\n    }\n    else {\n        document.getElementById('custompin').style.display = 'none';\n    }\n    if (shapeNumber == static_1.StaticValue.Shape.Custom) {\n        pinCountElement.value = String(static_1.StaticValue.defaultPin[shapeNumber]);\n        static_1.StaticValue.defaultInterval[shapeNumber].forEach(function (interval, i) {\n            var intervalElement = intervalElements[i];\n            intervalElement.value = String(interval);\n        });\n    }\n    interval = static_1.StaticValue.defaultInterval[shapeNumber];\n    drawAll();\n});\n// ピン数変更(カスタム円のみ)\npinCountElement.addEventListener('change', function () {\n    console.log('test');\n    pinCount = Number(pinCountElement.value);\n    if (isNaN(pinCount) || pinCount > 300 || pinCount < 1) {\n        var pinMessage = document.getElementById('input-pin-message');\n        pinMessage.textContent = 'エラー: ピン数には1-300までの数字を入力してください';\n    }\n    else {\n        var pinMessage = document.getElementById('input-pin-message');\n        pinMessage.textContent = '';\n    }\n    drawAll();\n});\n// 糸の間隔(カスタム円のみ)\nintervalElements.forEach(function (intervalElement, i) {\n    intervalElement.addEventListener('change', function () {\n        var intervalInput = intervalElement;\n        interval[i] = Number(intervalInput.value);\n        if (isNaN(interval[i]) || interval[i] > 300 || interval[i] < 0) {\n            interval[i] = 1;\n            var pinMessage = document.getElementById('input-interval-message');\n            pinMessage.textContent = 'エラー: 糸の間隔には0-300までの数字を入力してください';\n        }\n        else {\n            var pinMessage = document.getElementById('input-interval-message');\n            pinMessage.textContent = '';\n        }\n        drawAll();\n    });\n});\ncolorElements.forEach(function (colorElement, i) {\n    var colorInputElements = colorElement;\n    colorInputElements.addEventListener('change', function () {\n        colorSet[i] = colorInputElements.value;\n        drawAll();\n    });\n});\nbgColorElement.addEventListener('change', function () {\n    bgColor = bgColorElement.value;\n    drawAll();\n});\nfunction setColSize(shape) {\n    var x = static_1.StaticValue.colorNum[shape];\n    for (var i = 1; i <= 12; i++) {\n        if (i > x) {\n            var colorPicker = document.getElementById('color' + String(i)).parentNode;\n            colorPicker.style.display = 'none';\n        }\n        else {\n            var colorPicker = document.getElementById('color' + String(i)).parentNode;\n            colorPicker.style.display = 'flex';\n        }\n    }\n}\n\n\n//# sourceURL=webpack://Color-Sim/./src/main.ts?");

/***/ }),

/***/ "./src/static.ts":
/*!***********************!*\
  !*** ./src/static.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StaticValue = void 0;\nvar StaticValue;\n(function (StaticValue) {\n    StaticValue.defaultPin = Array(12);\n    StaticValue.defaultPin[0] = 48;\n    StaticValue.defaultPin[1] = 64;\n    StaticValue.defaultPin[2] = 77;\n    StaticValue.defaultPin[3] = 88;\n    StaticValue.defaultPin[4] = 108;\n    StaticValue.defaultPin[11] = 48;\n    StaticValue.defaultInterval = Array(12);\n    StaticValue.defaultInterval[0] = [23, 19, 17, 13, 11, 7];\n    (StaticValue.defaultInterval[1] = [31, 29, 23, 19, 17, 13, 11, 7]), // 円 64\n        (StaticValue.defaultInterval[2] = [37, 31, 29, 23, 19, 17]), // 円 77\n        (StaticValue.defaultInterval[3] = [43, 41, 37, 31, 29, 23]), // 円 88\n        (StaticValue.defaultInterval[4] = [53, 47, 43, 41, 37, 31, 29, 23, 19, 17, 13, 11]), // 円 108\n        (StaticValue.defaultInterval[5] = [31, 29, 23, 19, 17, 13]), // 正方形\n        (StaticValue.defaultInterval[6] = [37, 31, 29, 23, 19, 17]), // 正五角形\n        (StaticValue.defaultInterval[7] = [31, 29, 23, 19, 17, 13]), // 正六角形\n        (StaticValue.defaultInterval[8] = [28, 28, 28]), // つぼみ\n        (StaticValue.defaultInterval[9] = [16, 16, 16, 16]), // 麻の葉\n        (StaticValue.defaultInterval[10] = [16, 16, 16]), // 六芒星\n        (StaticValue.defaultInterval[11] = [31, 29, 23, 19, 17, 13]); // カスタム円\n    StaticValue.colorNum = [6, 8, 6, 6, 12, 6, 6, 6, 3, 2, 3, 6];\n    var Shape;\n    (function (Shape) {\n        Shape.Circle = 4;\n        Shape.Square = 5;\n        Shape.Pentagon = 6;\n        Shape.Hexagon = 7;\n        Shape.Bud = 8;\n        Shape.HempLeaf = 9;\n        Shape.Hexagram = 10;\n        Shape.Custom = 11;\n    })(Shape = StaticValue.Shape || (StaticValue.Shape = {}));\n})(StaticValue = exports.StaticValue || (exports.StaticValue = {}));\n\n\n//# sourceURL=webpack://Color-Sim/./src/static.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/main.ts");
/******/ 	
/******/ })()
;